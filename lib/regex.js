/* @macrome
 * @generatedby @bablr/macrome-generator-bablr
 * @generatedfrom ./regex.macro.js#e82635db52b5bf0106af6913169fcbe7480e86e5
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import _applyDecs from "@babel/runtime/helpers/applyDecs2305";
var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _initProto;
import { i, re } from '@bablr/boot';
import { Node, CoveredBy, InjectFrom, Attributes, AllowEmpty } from '@bablr/helpers/decorators';
import objectEntries from 'iter-tools-es/methods/object-entries';
import { stateEnhancer } from '@bablr/helpers/enhancers';
import * as Shared from '@bablr/helpers/productions';
import { buildExpression, buildString, buildBoolean, buildNumber, buildNull } from '@bablr/agast-vm-helpers';
export const canonicalURL = 'https://bablr.org/languages/core/bablr-regex-pattern';
export const dependencies = {};
const escapables = new Map(objectEntries({
  n: '\n',
  r: '\r',
  t: '\t',
  0: '\0'
}));
const flagCharacters = {
  global: 'g',
  ignoreCase: 'i',
  multiline: 'm'
};
const flagNames = Object.fromEntries(Object.entries(flagCharacters).map(([key, value]) => [value, key]));
const unique = flags => flags.length === new Set(flags).size;
const getSpecialPattern = span => {
  if (span === 'Pattern') {
    return re`/[*+{}[\]().^$|\n\\]/`;
  } else if (span === 'CharacterClass') {
    return re`/[\]\\]/`;
  } else {
    throw new Error('unknown span type for special pattern');
  }
};
const states = new WeakMap();
export const grammar = stateEnhancer({
  buildState(state) {
    states.set(state, {
      nCapturingGroups: 0
    });
  },
  branchState(state, branch) {
    states.set(branch, {
      ...states.get(state)
    });
  },
  acceptState(state, accepted) {
    Object.assign(states.get(state), states.get(accepted));
  }
}, (_dec = CoveredBy('Element'), _dec2 = Attributes(['negate']), _dec3 = CoveredBy('Element'), _dec4 = CoveredBy('Assertion'), _dec5 = CoveredBy('Assertion'), _dec6 = Attributes(['negate']), _dec7 = CoveredBy('Assertion'), _dec8 = CoveredBy('Element'), _dec9 = CoveredBy('CharacterClassElement'), _dec10 = CoveredBy('Element'), _dec11 = CoveredBy('CharacterClassElement'), _dec12 = CoveredBy('Element'), _dec13 = CoveredBy('CharacterSet'), _dec14 = Attributes(['negate']), _dec15 = CoveredBy('CharacterSet'), _dec16 = Attributes(['negate']), _dec17 = CoveredBy('CharacterSet'), _dec18 = Attributes(['negate']), _dec19 = CoveredBy('CharacterSet'), _dec20 = Attributes(['min', 'max']), _dec21 = Attributes(['cooked']), _dec22 = InjectFrom(Shared), _dec23 = InjectFrom(Shared), _dec24 = InjectFrom(Shared), class RegexGrammar {
  static {
    [_initProto] = _applyDecs(this, [[Node, 2, "Pattern"], [[AllowEmpty, Node], 2, "Flags"], [Node, 2, "Flag"], [AllowEmpty, 2, "Alternatives"], [[AllowEmpty, Node], 2, "Alternative"], [AllowEmpty, 2, "Elements"], [[_dec, Node], 2, "Group"], [Node, 2, "Backreference"], [[_dec2, Node], 2, "Lookahead"], [_dec3, 2, "Assertion"], [[_dec4, Node], 2, "StartOfInputAssertion"], [[_dec5, Node], 2, "EndOfInputAssertion"], [[_dec6, _dec7, Node], 2, "WordBoundaryAssertion"], [[_dec8, _dec9, Node], 2, "Character"], [[_dec10, Node], 2, "CharacterClass"], [[_dec11, Node], 2, "CharacterClassRange"], [_dec12, 2, "CharacterSet"], [[_dec13, Node], 2, "AnyCharacterSet"], [[_dec14, _dec15, Node], 2, "DigitCharacterSet"], [[_dec16, _dec17, Node], 2, "SpaceCharacterSet"], [[_dec18, _dec19, Node], 2, "WordCharacterSet"], [[_dec20, Node], 2, "Quantifier"], [Node, 2, "UnsignedInteger"], [[_dec21, Node], 2, "EscapeSequence"], [Node, 2, "EscapeCode"], [Node, 2, "Digit"], [_dec22, 2, "Any"], [[Node, _dec23], 2, "Keyword"], [[Node, _dec24], 2, "Punctuator"]], []).e;
  }
  constructor(...args) {
    _initProto(this);
  }
  *Pattern() {
    yield i`eat(<*Punctuator '/' balanced='/' balancedSpan='Pattern'> 'openToken')`;
    yield i`eat(<Alternatives>)`;
    yield i`eat(<*Punctuator '/' balancer> 'closeToken')`;
    yield i`eat(<Flags> 'flags')`;
  }
  *Flags({
    ctx
  }) {
    const flags = yield i`match(/[gim]+/)` || '';
    const flagsStr = ctx.sourceTextFor(flags);
    for (const flag of ['global', 'ignoreCase', 'multiline']) {
      if (!flags || !flagsStr.includes(flagCharacters[flag])) {
        yield i`eat(null ${buildString(flag)})`;
      }
    }
    if (flags) {
      if (!unique(flagsStr)) throw new Error('flags must be unique');
      for (const flag of flagsStr) {
        yield i`eat(<Flag> ${buildString(flagNames[flag])})`;
      }
    }
  }
  *Flag() {
    yield i`eatMatch(<*Keyword /[gim]/> 'value')`;
  }
  *Alternatives() {
    do {
      yield i`eat(<Alternative> 'alternatives[]')`;
    } while (yield i`eatMatch(<*Punctuator '|'> 'separators[]')`);
  }
  *Alternative() {
    yield i`eat(<Elements>)`;
  }
  *Elements() {
    let matched = false;
    while (yield i`match(/[^|]/)`) {
      matched = true;
      yield i`eat(<+Element> 'elements[]')`;
    }
    if (!matched) yield i`eat(null 'elements[]')`;
  }
  *Element({
    s,
    ctx
  }) {
    const s_ = states.get(s);
    let digits;
    if (digits = yield i`match(/\\\d+/)`) {
      if (s_.nCapturingGroups >= parseInt(ctx.sourceTextFor(digits).slice(1), 10)) {
        yield i`eat(<+Backreference>)`;
      } else {
        yield i`eat(<*+Character>)`;
      }
    } else {
      yield i`eat(<Any> null [
          <+CharacterClass '['>
          <+Group '('>
          <+Assertion /[$^]|\\b/i>
          <+CharacterSet /\.|\\[dswp]/i>
          <*+Character>
        ])`;
    }
    if (yield i`match(/[*+?{]/)`) {
      return i`holdForMatch(<Quantifier>)`;
    }
  }
  *Group({
    s
  }) {
    const s_ = states.get(s);
    yield i`eat(<*Punctuator '(' balanced=')'> 'openToken')`;
    let noncapturing = yield i`eatMatch(<*Punctuator '?:'> 'capturingToken')`;
    if (!noncapturing) {
      s_.nCapturingGroups++; // a capturing group can reference itself
    }
    yield i`eat(<Alternatives>)`;
    yield i`eat(<*Punctuator ')' balancer> 'closeToken')`;
  }
  *Backreference() {
    yield i`eat(<*Punctuator '\\'> 'escape')`;
    yield i`eat(<Digits> 'digits[]')`;
  }
  *Lookahead({
    s,
    ctx
  }) {
    const s_ = states.get(s);
    yield i`eat(<*Punctuator '(' balanced=')'> 'openToken')`;
    let sigil = yield i`eat(<*Punctuator /\?[=!]/> 'sigilToken')`;
    if (ctx.sourceTextFor(sigil) == '?!') {
      yield i`bindAttribute('negate' true)`;
    } else {
      yield i`bindAttribute('negate' false)`;
    }
    s_.nCapturingGroups++; // a capturing group can reference itself

    yield i`eat(<Alternatives>)`;
    yield i`eat(<*Punctuator ')' balancer> 'closeToken')`;
  }
  *Assertion() {
    yield i`eat(<Any> null [
      <*StartOfInputAssertion '^'>
      <*EndOfInputAssertion '$'>
      <*@WordBoundaryAssertion /\\b/i>
    ])`;
  }
  *StartOfInputAssertion() {
    yield i`eat(<*Keyword '^'> 'value')`;
  }
  *EndOfInputAssertion() {
    yield i`eatMatch(<*Keyword '$'> 'value')`;
  }
  *WordBoundaryAssertion({
    ctx
  }) {
    yield i`eatMatch(<*Punctuator '\\'> 'escape')`;
    const m = yield i`eat(<*Keyword /b/i> 'value')`;
    yield i`bindAttribute('negate' ${ctx.sourceTextFor(m) === 'B'})`;
  }
  *Character() {
    if (yield i`match('\\')`) {
      yield i`eat(<@EscapeSequence>)`;
    } else {
      yield i`eat(/[^\r\n\t]/s)`;
    }
  }
  *CharacterClass() {
    yield i`eat(<*Punctuator '[' balancedSpan='CharacterClass' balanced=']'> 'openToken')`;
    yield i`eatMatch(<*Keyword '^'> 'negate')`;
    while (yield i`match(/./s)`) {
      yield i`eat(<+CharacterClassElement> 'elements[]')`;
    }
    yield i`eat(<*Punctuator ']' balancer> 'closeToken')`;
  }
  *CharacterClassElement() {
    yield i`eat(<Any> null [
        <+CharacterSet /\\[dswp]/i>
        <*+Character>
      ])`;
    if (yield i`match('-')`) {
      return i`holdForMatch(<+CharacterClassRange>)`;
    }
  }
  *CharacterClassRange() {
    yield i`eat(<*+Character> 'min')`;
    yield i`eat(<*Punctuator '-'> 'rangeOperator')`;
    yield i`eat(<*+Character> 'max')`;
  }
  *CharacterSet() {
    yield i`eat(<Any> null [
      <+AnyCharacterSet '.'>
      <+DigitCharacterSet /\\[dD]/>
      <+SpaceCharacterSet /\\[sS]/>
      <+WordCharacterSet /\\[wW]/>
    ])`;
  }
  *AnyCharacterSet() {
    yield i`eat(<*Keyword '.'> 'value')`;
  }
  *DigitCharacterSet({
    ctx
  }) {
    yield i`eat(<*Punctuator '\\'> 'escape')`;
    let code = yield i`eat(<*Keyword /[dD]/> 'value')`;
    yield i`bindAttribute('negate' ${buildBoolean(ctx.sourceTextFor(code) === 'D')})`;
  }
  *SpaceCharacterSet({
    ctx
  }) {
    yield i`eat(<*Punctuator '\\'> 'escape')`;
    let code = yield i`eat(<*Keyword /[sS]/> 'value')`;
    yield i`bindAttribute('negate' ${buildBoolean(ctx.sourceTextFor(code) === 'S')})`;
  }
  *WordCharacterSet({
    ctx
  }) {
    yield i`eat(<*Punctuator '\\'> 'escape')`;
    let code = yield i`eat(<*Keyword /[wW]/> 'value')`;
    yield i`bindAttribute('negate' ${buildBoolean(ctx.sourceTextFor(code) === 'W')})`;
  }
  *Quantifier({
    ctx
  }) {
    yield i`eat(<+Element> 'element')`;
    let attrs;
    if (yield i`eatMatch(<*Keyword '*'> 'value')`) {
      attrs = {
        min: 0,
        max: Infinity
      };
    } else if (yield i`eatMatch(<*Keyword '+'> 'value')`) {
      attrs = {
        min: 1,
        max: Infinity
      };
    } else if (yield i`eatMatch(<*Keyword '?'> 'value')`) {
      attrs = {
        min: 0,
        max: 1
      };
    } else if (yield i`eat(<*Punctuator '{' balanced='}'> 'openToken')`) {
      let max;
      let min = yield i`eat(<*UnsignedInteger> 'min')`;
      if (yield i`eatMatch(<*Punctuator ','> 'separator')`) {
        max = yield i`eatMatch(<*UnsignedInteger> 'max')`;
      }
      min = min && ctx.sourceTextFor(min);
      max = max && ctx.sourceTextFor(max);
      min = min && parseInt(min, 10);
      max = max && parseInt(max, 10);
      attrs = {
        min,
        max
      };
      yield i`eat(<*Punctuator '}' balancer> 'closeToken')`;
    }
    yield i`bindAttribute('min' ${attrs.min ? buildNumber(attrs.min) : buildNull()})`;
    yield i`bindAttribute('max' ${attrs.max ? buildNumber(attrs.max) : buildNull()})`;
  }
  *UnsignedInteger() {
    yield i`eat(/\d+/)`;
  }
  *EscapeSequence({
    state,
    ctx,
    value: props
  }) {
    const parentSpan = state.span;
    yield i`eat(<*Punctuator '\\' openSpan='Escape'> 'escape')`;
    let match, cooked;
    if (match = yield i`match(/[\\/nrt0]/)`) {
      const match_ = ctx.sourceTextFor(match);
      yield i`eat(<*Keyword ${buildString(match_)} closeSpan='Escape'> 'value')`;
      cooked = escapables.get(match_) || match_;
    } else if (match = yield i`match(${getSpecialPattern(parentSpan, ctx.reifyExpression(props))})`) {
      const match_ = ctx.sourceTextFor(match);
      yield i`eat(<*Keyword ${buildString(match_)} closeSpan='Escape'> 'value')`;
      cooked = ctx.sourceTextFor(match);
    } else if (match = yield i`match(/[ucx\d]/)`) {
      const type = ctx.sourceTextFor(match);
      const codeNode = yield i`eat(<EscapeCode closeSpan='Escape'> 'value')`;
      cooked = String.fromCharCode(parseInt(ctx.getProperty(codeNode, 'digits').map(digit => ctx.sourceTextFor(digit)).join(''), type >= '0' && type <= '9' ? 8 : 16));
    } else {
      yield i`fail()`;
    }
    yield i`bindAttribute(cooked ${buildExpression(cooked)})`;
  }
  *EscapeCode({
    ctx
  }) {
    let type = ctx.sourceTextFor(yield i`eatMatch(<*Keyword /[uxc]/> 'sigilToken')`);
    if (type === 'u') {
      yield i`eat(<Digits /\d{4}/> 'digits[]')`;
    } else if (type === 'x') {
      yield i`eat(<Digits /\d{2}/> 'digits[]')`;
    } else if (type === 'c') {
      yield i`eat(<Digits /\d{2}/> 'digits[]')`;
    } else {
      yield i`eat(<Digits /[0-7]{1,2}|[0-3][0-7][0-7]/> 'digits[]')`;
    }
  }
  *Digits() {
    while (yield i`eatMatch(<*Digit>)`);
  }
  *Digit() {
    yield i`eat(/\d/)`;
  }
  *Any() {}
  *Keyword() {}
  *Punctuator() {}
}));