/* @macrome
 * @generatedby @bablr/macrome-generator-bablr
 * @generatedfrom ./grammar.macro.js#899373023671abc9bf70cdd573f6a316bd4c4e64
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import _applyDecs from "@babel/runtime/helpers/applyDecs2305";
var _dec, _dec2, _dec3, _initProto;
import { i } from '@bablr/boot';
import { Node, InjectFrom } from '@bablr/helpers/decorators';
import { triviaEnhancer } from '@bablr/helpers/trivia';
import * as productions from '@bablr/helpers/productions';
import * as Comment from '@bablr/language-c-comments';
import { mixin as functionMixin } from './mixins/function.js';
import { mixin as jsonMixin } from './mixins/json.js';
import { mixin as statementMixin } from './mixins/statement.js';
import { mixin as variablesMixin } from './mixins/variables.js';
import * as Regex from './regex.js';
export const dependencies = {
  Regex,
  Comment
};
export const canonicalURL = 'https://github.com/bablr-lang/language-es3';
export const atrivialGrammar = (_dec = InjectFrom(productions), _dec2 = InjectFrom(productions), _dec3 = InjectFrom(productions), class ES3Grammar extends functionMixin(jsonMixin(statementMixin(variablesMixin(Object)))) {
  static {
    [_initProto] = _applyDecs(this, [[[Node, _dec], 2, "Keyword"], [[Node, _dec2], 2, "Punctuator"], [_dec3, 2, "Any"]], []).e;
  }
  constructor(...args) {
    super(...args);
    _initProto(this);
  }
  *Expression() {
    yield i`eat(<Any> null [
      <*Boolean /true|false/>
      <Array '['>
      <Object '{'>
      <*Null 'null'>
    ])`;
  }
  *Statement() {
    yield i`eat(<Any> null [
      <IfStatement 'if'>
      <SwitchStatement 'switch'>
      <WhileStatement 'while'>
      <DoWhileStatement 'do'>
      <ReturnStatement 'return'>
      <ExpressionStatement>
    ])`;
  }
  *Keyword() {}
  *Punctuator() {}
  *Any() {}
});
export const grammar = triviaEnhancer({
  triviaIsAllowed: s => s.span === 'Bare',
  *eatMatchTrivia() {
    if (yield i`match(/[ \n\r\t]|\/\/|\/\*/)`) {
      yield i`eat(<#*Comment:Trivia>)`;
    }
  }
}, atrivialGrammar);