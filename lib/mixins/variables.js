/* @macrome
 * @generatedby @bablr/macrome-generator-bablr
 * @generatedfrom ./variables.macro.js#f62d8abf48759ef074511c1467aae528761d54e9
 * This file is autogenerated. Please do not edit it directly.
 * When editing run `npx macrome watch` then change the file this is generated from.
 */
import _applyDecs from "@babel/runtime/helpers/applyDecs2305";
import { i } from '@bablr/boot';
import { Node } from '@bablr/helpers/decorators';
export const mixin = Base => {
  var _initProto;
  return class ES3VariablesGrammar extends Base {
    static {
      [_initProto] = _applyDecs(this, [[Node, 2, "Identifier"], [Node, 2, "VariableDeclaration"], [Node, 2, "VariableDeclarator"], [Node, 2, "AssignmentExpression"]], []).e;
    }
    constructor(...args) {
      super(...args);
      _initProto(this);
    }
    *Identifier() {
      yield i`eat(/[\w_$][\w\d_$]*/)`;
    }
    *VariableDeclaration() {
      yield i`eat(<*Keyword 'var'> 'sigilToken')`;
      yield i`eat(<VariableDeclarator> 'declarations[]')`;
      yield i`eat(<List> 'declarations[]' {
      element: <VariableDeclarator>
      allowTrailingSeparator: false
      separator: <*Punctuator ','>
    })`;
    }
    *VariableDeclarator() {
      yield i`eat(<*Identifier> 'id')`;
      yield i`eat(<*Punctuator '='> 'sigilToken')`;
      yield i`eat(<*Statement> 'init')`;
    }
    *AssignmentExpression() {
      yield i`eat(<*Identifier> 'left')`;
      yield i`eat(<*Punctuator '='> 'sigilToken')`;
      yield i`eat(<*Statement> 'right')`;
    }
  };
};